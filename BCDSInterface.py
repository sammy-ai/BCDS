# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ImageEditor.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QGraphicsScene, QGraphicsView, QGraphicsLineItem, QMainWindow, QAction, QFileDialog, QSlider, QColorDialog, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QFileDialog, QMessageBox
from PyQt5.QtGui import QImage, QPixmap, QPen, QColor, QTransform
from PyQt5.QtCore import Qt, QPointF, QRectF
from PyQt5.QtPrintSupport import QPrinter, QPrintDialog
import numpy as np
import cv2
import imutils
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1594, 830)
        MainWindow.setStyleSheet("background-color: rgb(165, 165, 165);\n"
"color: rgb(255, 255, 255);\n"
"background-color: rgb(31, 31, 31);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.image_label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.image_label_2.setFont(font)
        self.image_label_2.setStyleSheet("")
        self.image_label_2.setObjectName("image_label_2")
        self.gridLayout.addWidget(self.image_label_2, 0, 3, 1, 1, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.undo_button = QtWidgets.QPushButton(self.centralwidget)
        self.undo_button.setMaximumSize(QtCore.QSize(65, 16777215))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("BCDS/code/icons/undo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.undo_button.setIcon(icon)
        self.undo_button.setDefault(False)
        self.undo_button.setFlat(True)
        self.undo_button.setObjectName("undo_button")
        self.horizontalLayout_2.addWidget(self.undo_button)
        self.redo_button = QtWidgets.QPushButton(self.centralwidget)
        self.redo_button.setMaximumSize(QtCore.QSize(65, 16777215))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("BCDS/code/icons/redo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.redo_button.setIcon(icon1)
        self.redo_button.setFlat(True)
        self.redo_button.setObjectName("redo_button")
        self.horizontalLayout_2.addWidget(self.redo_button)
        self.detect_button = QtWidgets.QPushButton(self.centralwidget)
        self.detect_button.setMaximumSize(QtCore.QSize(72, 16777215))
        self.detect_button.setStyleSheet("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("BCDS/code/icons/radar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.detect_button.setIcon(icon2)
        self.detect_button.setFlat(False)
        self.detect_button.setObjectName("detect_button")
        self.horizontalLayout_2.addWidget(self.detect_button)
        self.detect_button.setEnabled(False)
        self.generate_report = QtWidgets.QPushButton(self.centralwidget)
        self.generate_report.setMaximumSize(QtCore.QSize(72, 23))
        self.generate_report.setStyleSheet("radius {\n"
"    10px;\n"
"}")
        self.generate_report.setObjectName("generate_report")
        self.horizontalLayout_2.addWidget(self.generate_report)
        self.generate_report.setEnabled(False)
        self.profile = QtWidgets.QPushButton(self.centralwidget)
        self.profile.setMaximumSize(QtCore.QSize(60, 16777215))
        self.profile.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("BCDS/code/icons/user.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.profile.setIcon(icon3)
        self.profile.setFlat(True)
        self.profile.setObjectName("profile")
        self.horizontalLayout_2.addWidget(self.profile)
        self.gridLayout.addLayout(self.horizontalLayout_2, 0, 4, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.prev_button = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.prev_button.setFont(font)
        self.prev_button.setStyleSheet("font: 8pt \"MS Shell Dlg 2\";")
        self.prev_button.setObjectName("prev_button")
        self.horizontalLayout_3.addWidget(self.prev_button)
        self.nex_button = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.nex_button.setFont(font)
        self.nex_button.setStyleSheet("font: 8pt \"MS Shell Dlg 2\";")
        self.nex_button.setObjectName("nex_button")
        self.horizontalLayout_3.addWidget(self.nex_button)
        self.gridLayout.addLayout(self.horizontalLayout_3, 3, 3, 1, 2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.insert_new = QtWidgets.QPushButton(self.centralwidget)
        self.insert_new.setMinimumSize(QtCore.QSize(60, 30))
        self.insert_new.setMaximumSize(QtCore.QSize(60, 30))
        self.insert_new.setStyleSheet("color: rgb(255, 255, 255);\n"
"color: rgb(255, 255, 255);")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("BCDS/code/icons/insert.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.insert_new.setIcon(icon4)
        self.insert_new.setDefault(True)
        self.insert_new.setFlat(False)
        self.insert_new.setObjectName("insert_new")
        self.horizontalLayout.addWidget(self.insert_new)
        self.open_folder = QtWidgets.QPushButton(self.centralwidget)
        self.open_folder.setMinimumSize(QtCore.QSize(60, 30))
        self.open_folder.setMaximumSize(QtCore.QSize(60, 30))
        self.open_folder.setStatusTip("")
        self.open_folder.setWhatsThis("")
        self.open_folder.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("BCDS/code/icons/folder.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.open_folder.setIcon(icon5)
        self.open_folder.setDefault(True)
        self.open_folder.setFlat(False)
        self.open_folder.setObjectName("open_folder")
        self.horizontalLayout.addWidget(self.open_folder)
        self.save_button = QtWidgets.QPushButton(self.centralwidget)
        self.save_button.setMinimumSize(QtCore.QSize(60, 30))
        self.save_button.setMaximumSize(QtCore.QSize(60, 30))
        self.save_button.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("BCDS/code/icons/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.save_button.setIcon(icon6)
        self.save_button.setDefault(True)
        self.save_button.setFlat(False)
        self.save_button.setObjectName("save_button")
        self.horizontalLayout.addWidget(self.save_button)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setMaximumSize(QtCore.QSize(200, 16777215))
        self.stackedWidget.setStyleSheet("background-color: rgb(32, 32, 32);\n""")
        self.stackedWidget.setObjectName("stackedWidget")
        self.imageInfo = QtWidgets.QWidget()
        self.imageInfo.setObjectName("imageInfo")
        self.imageInformation = QtWidgets.QLabel(self.imageInfo)
        self.imageInformation.setGeometry(QtCore.QRect(10, 60, 181, 641))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(60)
        self.imageInformation.setFont(font)
        self.imageInformation.setText("")
        self.imageInformation.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.imageInformation.setObjectName("imageInformation")
        self.info = QtWidgets.QLabel(self.imageInfo)
        self.info.setGeometry(QtCore.QRect(60, 10, 61, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.info.setFont(font)
        self.info.setAlignment(QtCore.Qt.AlignCenter)
        self.info.setObjectName("info")
        self.stackedWidget.addWidget(self.imageInfo)
        self.adjustment = QtWidgets.QWidget()
        self.adjustment.setObjectName("adjustment")
        self.layoutWidget = QtWidgets.QWidget(self.adjustment)
        self.layoutWidget.setGeometry(QtCore.QRect(1, 4, 161, 611))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.light = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.light.setFont(font)
        self.light.setObjectName("light")
        self.verticalLayout_4.addWidget(self.light)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.brightness_label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.brightness_label.setFont(font)
        self.brightness_label.setScaledContents(True)
        self.brightness_label.setAlignment(QtCore.Qt.AlignCenter)
        self.brightness_label.setObjectName("brightness_label")
        self.horizontalLayout_4.addWidget(self.brightness_label)
        self.brightness_value = QtWidgets.QLabel(self.layoutWidget)
        self.brightness_value.setText("")
        self.brightness_value.setObjectName("brightness_value")
        self.horizontalLayout_4.addWidget(self.brightness_value)
        self.verticalLayout_4.addLayout(self.horizontalLayout_4)
        self.brightness_slider = QtWidgets.QSlider(self.layoutWidget)
        self.brightness_slider.setOrientation(QtCore.Qt.Horizontal)
        self.brightness_slider.setObjectName("brightness_slider")
        self.verticalLayout_4.addWidget(self.brightness_slider)
        self.brightness_slider.setMinimum(-100)
        self.brightness_slider.setMaximum(100)
        self.brightness_slider.setValue(0)
        self.brightness_slider.setTickInterval(10)
        self.brightness_slider.setTickPosition(QSlider.TicksBelow)
        self.brightness_slider.setEnabled(False)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.exposure_label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.exposure_label.setFont(font)
        self.exposure_label.setObjectName("exposure_label")
        self.horizontalLayout_5.addWidget(self.exposure_label)
        self.exposure_value = QtWidgets.QLabel(self.layoutWidget)
        self.exposure_value.setText("")
        self.exposure_value.setObjectName("exposure_value")
        self.horizontalLayout_5.addWidget(self.exposure_value)
        self.verticalLayout_4.addLayout(self.horizontalLayout_5)
        self.exposure_slider = QtWidgets.QSlider(self.layoutWidget)
        self.exposure_slider.setOrientation(QtCore.Qt.Horizontal)
        self.exposure_slider.setObjectName("exposure_slider")
        self.verticalLayout_4.addWidget(self.exposure_slider)
        self.exposure_slider.setMinimum(-100)
        self.exposure_slider.setMaximum(100)
        self.exposure_slider.setValue(0)
        self.exposure_slider.setTickInterval(10)
        self.exposure_slider.setTickPosition(QSlider.TicksBelow)
        self.exposure_slider.setEnabled(False)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.contrast_label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.contrast_label.setFont(font)
        self.contrast_label.setObjectName("contrast_label")
        self.horizontalLayout_6.addWidget(self.contrast_label)
        self.contrast_value = QtWidgets.QLabel(self.layoutWidget)
        self.contrast_value.setText("")
        self.contrast_value.setObjectName("contrast_value")
        self.horizontalLayout_6.addWidget(self.contrast_value)
        self.verticalLayout_4.addLayout(self.horizontalLayout_6)
        self.contrast_slider = QtWidgets.QSlider(self.layoutWidget)
        self.contrast_slider.setOrientation(QtCore.Qt.Horizontal)
        self.contrast_slider.setObjectName("contrast_slider")
        self.verticalLayout_4.addWidget(self.contrast_slider)
        self.contrast_slider.setMinimum(-100)
        self.contrast_slider.setMaximum(100)
        self.contrast_slider.setValue(0)
        self.contrast_slider.setTickInterval(10)
        self.contrast_slider.setTickPosition(QSlider.TicksBelow)
        self.contrast_slider.setEnabled(False)
        self.color_label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.color_label.setFont(font)
        self.color_label.setObjectName("color_label")
        self.verticalLayout_4.addWidget(self.color_label)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.saturation_label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.saturation_label.setFont(font)
        self.saturation_label.setObjectName("saturation_label")
        self.horizontalLayout_7.addWidget(self.saturation_label)
        self.saturation_value = QtWidgets.QLabel(self.layoutWidget)
        self.saturation_value.setText("")
        self.saturation_value.setObjectName("saturation_value")
        self.horizontalLayout_7.addWidget(self.saturation_value)
        self.verticalLayout_4.addLayout(self.horizontalLayout_7)
        self.saturation_slider = QtWidgets.QSlider(self.layoutWidget)
        self.saturation_slider.setOrientation(QtCore.Qt.Horizontal)
        self.saturation_slider.setObjectName("saturation_slider")
        self.verticalLayout_4.addWidget(self.saturation_slider)
        self.saturation_slider.setMinimum(-100)
        self.saturation_slider.setMaximum(100)
        self.saturation_slider.setValue(0)
        self.saturation_slider.setTickInterval(10)
        self.saturation_slider.setTickPosition(QSlider.TicksBelow)
        self.saturation_slider.setEnabled(False)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.warmth_label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.warmth_label.setFont(font)
        self.warmth_label.setObjectName("warmth_label")
        self.horizontalLayout_8.addWidget(self.warmth_label)
        self.warmth_value = QtWidgets.QLabel(self.layoutWidget)
        self.warmth_value.setText("")
        self.warmth_value.setObjectName("warmth_value")
        self.horizontalLayout_8.addWidget(self.warmth_value)
        self.verticalLayout_4.addLayout(self.horizontalLayout_8)
        self.warmth_slider = QtWidgets.QSlider(self.layoutWidget)
        self.warmth_slider.setOrientation(QtCore.Qt.Horizontal)
        self.warmth_slider.setObjectName("warmth_slider")
        self.verticalLayout_4.addWidget(self.warmth_slider)
        self.warmth_slider.setMinimum(-100)
        self.warmth_slider.setMaximum(100)
        self.warmth_slider.setValue(0)
        self.warmth_slider.setTickInterval(10)
        self.warmth_slider.setTickPosition(QSlider.TicksBelow)
        self.warmth_slider.setEnabled(False)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.tint_label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tint_label.setFont(font)
        self.tint_label.setObjectName("tint_label")
        self.horizontalLayout_9.addWidget(self.tint_label)
        self.tint_value = QtWidgets.QLabel(self.layoutWidget)
        self.tint_value.setText("")
        self.tint_value.setObjectName("tint_value")
        self.horizontalLayout_9.addWidget(self.tint_value)
        self.verticalLayout_4.addLayout(self.horizontalLayout_9)
        self.tint_slider = QtWidgets.QSlider(self.layoutWidget)
        self.tint_slider.setOrientation(QtCore.Qt.Horizontal)
        self.tint_slider.setObjectName("tint_slider")
        self.verticalLayout_4.addWidget(self.tint_slider)
        self.tint_slider.setMinimum(-100)
        self.tint_slider.setMaximum(100)
        self.tint_slider.setValue(0)
        self.tint_slider.setTickInterval(10)
        self.tint_slider.setTickPosition(QSlider.TicksBelow)
        self.tint_slider.setEnabled(False)
        self.stackedWidget.addWidget(self.adjustment)
        self.edit = QtWidgets.QWidget()
        self.edit.setObjectName("edit")
        self.widget = QtWidgets.QWidget(self.edit)
        self.widget.setGeometry(QtCore.QRect(5, 26, 171, 311))
        self.widget.setObjectName("widget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.pencil_label = QtWidgets.QLabel(self.widget)
        self.pencil_label.setObjectName("pencil_label")
        self.horizontalLayout_12.addWidget(self.pencil_label)
        self.pen_button = QtWidgets.QToolButton(self.widget)
        self.pen_button.setMinimumSize(QtCore.QSize(35, 35))
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("BCDS/code/icons/pencil.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pen_button.setIcon(icon7)
        self.pen_button.setObjectName("pen_button")
        #me
        self.pen_button.setCheckable(True)
        #/me
        self.horizontalLayout_12.addWidget(self.pen_button)
        self.pen_color = QtWidgets.QPushButton(self.widget)
        self.pen_color.setObjectName("pen_color")
        self.horizontalLayout_12.addWidget(self.pen_color)
        self.verticalLayout_5.addLayout(self.horizontalLayout_12)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.eraser_label = QtWidgets.QLabel(self.widget)
        self.eraser_label.setObjectName("eraser_label")
        self.horizontalLayout_13.addWidget(self.eraser_label)
        self.eraser_button = QtWidgets.QToolButton(self.widget)
        self.eraser_button.setMinimumSize(QtCore.QSize(35, 35))
        self.eraser_button.setMaximumSize(QtCore.QSize(16777213, 16777215))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("BCDS/code/icons/eraser.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.eraser_button.setIcon(icon8)
        self.eraser_button.setObjectName("eraser_button")
        self.horizontalLayout_13.addWidget(self.eraser_button)
        self.verticalLayout_5.addLayout(self.horizontalLayout_13)
        self.thickness_label = QtWidgets.QLabel(self.widget)
        self.thickness_label.setObjectName("thickness_label")
        self.verticalLayout_5.addWidget(self.thickness_label)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.thickness_slider = QtWidgets.QSlider(self.widget)
        self.thickness_slider.setOrientation(QtCore.Qt.Horizontal)
        self.thickness_slider.setObjectName("thickness_slider")
        #me
        self.thickness_slider.setMinimum(1)
        self.thickness_slider.setMaximum(10)
        self.thickness_slider.setValue(2)
        self.thickness_slider.setTickInterval(1)
        self.thickness_slider.setTickPosition(QSlider.TicksBelow)
        self.thickness_slider.setEnabled(False)
        self.thickness_slider.valueChanged.connect(self.update_pen_size)
        #/me
        self.horizontalLayout_10.addWidget(self.thickness_slider)
        self.thickness_value = QtWidgets.QLabel(self.widget)
        self.thickness_value.setText("")
        self.thickness_value.setObjectName("thickness_value")
        self.horizontalLayout_10.addWidget(self.thickness_value)
        self.verticalLayout_5.addLayout(self.horizontalLayout_10)
        self.opacity_label = QtWidgets.QLabel(self.widget)
        self.opacity_label.setObjectName("opacity_label")
        self.verticalLayout_5.addWidget(self.opacity_label)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.opacity_slider = QtWidgets.QSlider(self.widget)
        self.opacity_slider.setOrientation(QtCore.Qt.Horizontal)
        self.opacity_slider.setObjectName("opacity_slider")
        self.horizontalLayout_11.addWidget(self.opacity_slider)
        self.opacity_value = QtWidgets.QLabel(self.widget)
        self.opacity_slider.setEnabled(False)
        self.opacity_value.setText("")
        self.opacity_value.setObjectName("opacity_value")
        self.horizontalLayout_11.addWidget(self.opacity_value)
        self.verticalLayout_5.addLayout(self.horizontalLayout_11)
        self.stackedWidget.addWidget(self.edit)
        self.zoom = QtWidgets.QWidget()
        self.zoom.setObjectName("zoom")
        self.widget1 = QtWidgets.QWidget(self.zoom)
        self.widget1.setGeometry(QtCore.QRect(11, 21, 161, 131))
        self.widget1.setObjectName("widget1")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.zoom_label = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.zoom_label.setFont(font)
        self.zoom_label.setObjectName("zoom_label")
        self.verticalLayout_7.addWidget(self.zoom_label)
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.zoom_slider = QtWidgets.QSlider(self.widget1)
        self.zoom_slider.setOrientation(QtCore.Qt.Horizontal)
        self.zoom_slider.setObjectName("zoom_slider")
        #me
        self.zoom_slider.setMinimum(1)
        self.zoom_slider.setMaximum(200)
        self.zoom_slider.setValue(100)
        self.zoom_slider.setTickInterval(10)
        self.zoom_slider.setTickPosition(QSlider.TicksBelow)
        self.zoom_slider.valueChanged.connect(self.zoom_image)
        self.zoom_slider.setEnabled(False)
        self.zoom_slider.setGeometry(10, 50, 150, 30)
        self.zoom_slider.setToolTip("Zoom")
        #/me
        self.horizontalLayout_16.addWidget(self.zoom_slider)
        self.zoom_value = QtWidgets.QLabel(self.widget1)
        self.zoom_value.setText("")
        self.zoom_value.setObjectName("zoom_value")
        self.horizontalLayout_16.addWidget(self.zoom_value)
        self.verticalLayout_7.addLayout(self.horizontalLayout_16)
        self.stackedWidget.addWidget(self.zoom)
        self.addText = QtWidgets.QWidget()
        self.addText.setObjectName("addText")
        self.widget2 = QtWidgets.QWidget(self.addText)
        self.widget2.setGeometry(QtCore.QRect(1, 11, 191, 114))
        self.widget2.setObjectName("widget2")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.widget2)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.text_label = QtWidgets.QLabel(self.widget2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.text_label.setFont(font)
        self.text_label.setObjectName("text_label")
        self.verticalLayout_6.addWidget(self.text_label)
        self.font_combo = QtWidgets.QComboBox(self.widget2)
        self.font_combo.setObjectName("font_combo")
        self.font_combo.addItem("")
        self.font_combo.addItem("")
        self.font_combo.addItem("")
        self.verticalLayout_6.addWidget(self.font_combo)
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.bold_button = QtWidgets.QPushButton(self.widget2)
        self.bold_button.setObjectName("bold_button")
        self.horizontalLayout_14.addWidget(self.bold_button)
        self.italics_button = QtWidgets.QPushButton(self.widget2)
        self.italics_button.setObjectName("italics_button")
        self.horizontalLayout_14.addWidget(self.italics_button)
        self.verticalLayout_6.addLayout(self.horizontalLayout_14)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.text_input = QtWidgets.QLineEdit(self.widget2)
        self.text_input.setMinimumSize(QtCore.QSize(0, 30))
        self.text_input.setMaximumSize(QtCore.QSize(120, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.text_input.setFont(font)
        self.text_input.setStyleSheet("padding: 2px;")
        self.text_input.setObjectName("text_input")
        self.horizontalLayout_15.addWidget(self.text_input)
        self.pushButton = QtWidgets.QPushButton(self.widget2)
        self.pushButton.setMaximumSize(QtCore.QSize(16777215, 32))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_15.addWidget(self.pushButton)
        self.verticalLayout_6.addLayout(self.horizontalLayout_15)
        self.stackedWidget.addWidget(self.addText)
        self.verticalLayout.addWidget(self.stackedWidget)
        self.gridLayout.addLayout(self.verticalLayout, 1, 0, 2, 1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.scene = QGraphicsScene()
        self.view = QGraphicsView(self.scene)
        self.view.setDragMode(QGraphicsView.ScrollHandDrag)
        self.view.setAutoFillBackground(True)
        self.verticalLayout_2.addWidget(self.view)
        #self.setCentralWidget(self.view)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.gridLayout.addLayout(self.verticalLayout_2, 1, 3, 2, 2)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.zoom_in = QtWidgets.QPushButton(self.centralwidget)
        self.zoom_in.setMaximumSize(QtCore.QSize(60, 16777215))
        self.zoom_in.setText("")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("BCDS/code/icons/zoom-in.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.zoom_in.setIcon(icon9)
        self.zoom_in.setObjectName("zoom_in")
        self.verticalLayout_3.addWidget(self.zoom_in)
        self.adjustment_button = QtWidgets.QPushButton(self.centralwidget)
        self.adjustment_button.setMaximumSize(QtCore.QSize(60, 16777215))
        self.adjustment_button.setText("")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("BCDS/code/icons/brightness.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.adjustment_button.setIcon(icon10)
        self.adjustment_button.setObjectName("adjustment_button")
        self.verticalLayout_3.addWidget(self.adjustment_button)
        self.rotate_button = QtWidgets.QPushButton(self.centralwidget)
        self.rotate_button.setMaximumSize(QtCore.QSize(60, 16777215))
        self.rotate_button.setText("")
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("BCDS/code/icons/rotate_image.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rotate_button.setIcon(icon11)
        self.rotate_button.setObjectName("rotate_button")
        self.verticalLayout_3.addWidget(self.rotate_button)
        self.editImage_button = QtWidgets.QPushButton(self.centralwidget)
        self.editImage_button.setMaximumSize(QtCore.QSize(60, 16777215))
        self.editImage_button.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("BCDS/code/icons/edit-image.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.editImage_button.setIcon(icon12)
        self.editImage_button.setObjectName("editImage_button")
        self.verticalLayout_3.addWidget(self.editImage_button)
        self.viewbox_button = QtWidgets.QPushButton(self.centralwidget)
        self.viewbox_button.setMaximumSize(QtCore.QSize(60, 16777215))
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("BCDS/code/icons/split-screen.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.viewbox_button.setIcon(icon13)
        self.viewbox_button.setObjectName("viewbox_button")
        self.verticalLayout_3.addWidget(self.viewbox_button)
        self.expand_button = QtWidgets.QPushButton(self.centralwidget)
        self.expand_button.setMaximumSize(QtCore.QSize(60, 16777215))
        self.expand_button.setText("")
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("BCDS/code/icons/expand.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.expand_button.setIcon(icon14)
        self.expand_button.setObjectName("expand_button")
        self.verticalLayout_3.addWidget(self.expand_button)
        self.text_button = QtWidgets.QPushButton(self.centralwidget)
        self.text_button.setMaximumSize(QtCore.QSize(60, 16777215))
        self.text_button.setText("")
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap("BCDS/code/icons/text.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.text_button.setIcon(icon15)
        self.text_button.setObjectName("text_button")
        self.verticalLayout_3.addWidget(self.text_button)
        self.lock_button = QtWidgets.QPushButton(self.centralwidget)
        self.lock_button.setMaximumSize(QtCore.QSize(60, 16777215))
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap("BCDS/code/icons/padlock.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.lock_button.setIcon(icon16)
        self.lock_button.setObjectName("lock_button")
        self.verticalLayout_3.addWidget(self.lock_button)
        self.info_button = QtWidgets.QPushButton(self.centralwidget)
        self.info_button.setMaximumSize(QtCore.QSize(60, 16777215))
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap("BCDS/code/icons/info.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.info_button.setIcon(icon17)
        self.info_button.setObjectName("info_button")
        self.verticalLayout_3.addWidget(self.info_button)
        self.gridLayout.addLayout(self.verticalLayout_3, 1, 1, 2, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 1, 2, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1594, 21))
        self.menubar.setStyleSheet("menuFile:hover\n"
"{\n"
"    color: blue;\n"
"}")
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setAutoFillBackground(False)
        self.menuFile.setStyleSheet("QMenu:hover{\n"
"    background-color: rgb(36, 36, 36);\n"
"}")
        self.menuFile.setObjectName("menuFile")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.actionOpen_Image = QtWidgets.QAction(MainWindow)
        self.actionOpen_Image.setIcon(icon4)
        self.actionOpen_Image.setObjectName("actionOpen_Image")
        self.actionOpen_Folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_Folder.setIcon(icon5)
        self.actionOpen_Folder.setObjectName("actionOpen_Folder")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setIcon(icon6)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_As = QtWidgets.QAction(MainWindow)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionShare = QtWidgets.QAction(MainWindow)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap("BCDS/code/icons/share.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShare.setIcon(icon18)
        self.actionShare.setObjectName("actionShare")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.actionBCDS_Help = QtWidgets.QAction(MainWindow)
        self.actionBCDS_Help.setObjectName("actionBCDS_Help")
        self.actionAbout_BCDS = QtWidgets.QAction(MainWindow)
        self.actionAbout_BCDS.setObjectName("actionAbout_BCDS")
        self.menuFile.addAction(self.actionOpen_Image)
        self.menuFile.addAction(self.actionOpen_Folder)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addAction(self.actionShare)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuHelp.addAction(self.actionBCDS_Help)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout_BCDS)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        # ACTION LISTENERS
        # BUTTONS
        self.insert_new.clicked.connect(self.openFile)
        self.actionOpen_Image.triggered.connect(self.openFile)
        self.actionQuit.triggered.connect(exit)
        self.detect_button.clicked.connect(self.scanImage)
        self.adjustment_button.clicked.connect(self.showAdjustment)
        self.text_button.clicked.connect(self.showAddText)
        self.editImage_button.clicked.connect(self.showEditImage)
        self.info_button.clicked.connect(self.showInfo)
        self.save_button.clicked.connect(self.saveFile)
        self.zoom_in.clicked.connect(self.showZoom)
        self.pen_color.clicked.connect(self.change_pen_color)
        self.pen_button.clicked.connect(self.toggle_draw)
        self.rotate_button.clicked.connect(self.rotate_image)
        self.nex_button.clicked.connect(self.show_next_image)
        self.prev_button.clicked.connect(self.show_next_image)
        self.open_folder.clicked.connect(self.open_folders)
        self.actionOpen_Folder.triggered.connect(self.open_folders)
        self.generate_report.clicked.connect(self.open_textEditor)
        self.viewbox_button.clicked.connect(self.adjust_to_blueish)


        self.image_paths = []
        self.current_image_index = 0

        # SLIDERS
        self.contrast_slider.valueChanged.connect(self.adjust_contrast)
        self.brightness_slider.valueChanged.connect(self.adjust_brightness)
        self.saturation_slider.valueChanged.connect(self.adjust_saturation)
        self.exposure_slider.valueChanged.connect(self.adjust_exposure)
        self.warmth_slider.valueChanged.connect(self.adjust_warmth)
        self.tint_slider.valueChanged.connect(self.adjust_tint)
        self.thickness_slider.valueChanged.connect(self.update_pen_size)

        # Initialize the zoom level to 0
        self.zoom_level = 0

        #DRAW
        self.pen = QPen(Qt.white, 2, Qt.SolidLine)
        self.drawing = False
        self.last_point = QPointF()

        self.image_path = None

    # STACKED WIDGETS

    def showAdjustment(self):
        self.stackedWidget.setCurrentWidget(self.adjustment)

    def showEditImage(self):
        self.stackedWidget.setCurrentWidget(self.edit)

    def showAddText(self):
        self.stackedWidget.setCurrentWidget(self.addText)

    def showInfo(self):
        self.stackedWidget.setCurrentWidget(self.imageInfo)

    def showZoom(self):
        self.stackedWidget.setCurrentWidget(self.zoom)

    def open_textEditor(self):
        self.text_editor_window = TextEditorWindow()
        self.text_editor_window.show()


    # new detect code here
    def openFile(self):
        filename, _ = QFileDialog.getOpenFileName(
                self.view, "Open Image", "", "Image Files (*.png *.jpg *.jpeg *.bmp)")
        if filename:
                self.image_path = filename
                image = QImage(filename)
                pixmap = QPixmap.fromImage(image)
                self.scene.clear()
                self.scene.addPixmap(pixmap)
                self.view.fitInView(self.scene.sceneRect(), Qt.KeepAspectRatio)
                image_name = os.path.basename(filename)
                self.image_label_2.setText(image_name)

                #
                self.zoom_slider.setEnabled(True)
                self.contrast_slider.setEnabled(True)
                self.brightness_slider.setEnabled(True)
                self.saturation_slider.setEnabled(True)
                self.warmth_slider.setEnabled(True)
                self.tint_slider.setEnabled(True)
                self.exposure_slider.setEnabled(True)
                self.detect_button.setEnabled(True)
                self.generate_report.setEnabled(True)
                self.thickness_slider.setEnabled(True)


    # OPEN FOLDER

    def open_folders(self):
        folder_path = QFileDialog.getExistingDirectory(
            self.centralwidget, "Open Folder")

        if folder_path:
            self.image_paths = self.get_image_paths(folder_path)
            if self.image_paths:
                self.show_image(self.image_paths[self.current_image_index])
                self.update_navigation_buttons()

    def get_image_paths(self, folder_path):
        image_extensions = (".jpg", ".jpeg", ".png")
        image_paths = [os.path.join(folder_path, filename) for filename in os.listdir(
            folder_path) if filename.lower().endswith(image_extensions)]
        return image_paths

    def show_image(self, image_path):
        image = QPixmap(image_path)
        self.scene.clear()
        self.scene.addPixmap(image)
        self.view.fitInView(QRectF(image.rect()), Qt.KeepAspectRatio)

    def show_next_image(self):
        if self.current_image_index < len(self.image_paths) - 1:
            self.current_image_index += 1
            self.show_image(self.image_paths[self.current_image_index])
            self.update_navigation_buttons()

    def show_previous_image(self):
        if self.current_image_index > 0:
            self.current_image_index -= 1
            self.show_image(self.image_paths[self.current_image_index])
            self.update_navigation_buttons()

    def update_navigation_buttons(self):
        self.nex_button.setEnabled(
            self.current_image_index < len(self.image_paths) - 1)
        self.prev_button.setEnabled(self.current_image_index > 0)



    #me
    #this the the function for zooming
    def zoom_image(self, value):
        scale_factor = value / 100.0
        self.view.resetTransform()
        self.view.scale(scale_factor, scale_factor)

    #Me/

    #me
    def update_pen_size(self):
        pen_size = self.pen_size_slider.value()
        self.pen.setWidth(pen_size)

    #/me
    def saveFile(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_filter = "Image (*.jpg *.jpeg *.png)"
        save_file, _ = QFileDialog.getSaveFileName(
            None, "Save Image", "", file_filter, options=options)

        if save_file:
            cv2.imwrite(save_file, self.image)


    def scanImage(self):
        # Load the pre-trained model for breast cancer detection
        model = load_model('breast_cancer_model_VGG16Base_v0002.model')
        # model = load_model('breast_cancer_model_VGG16Base_v0002.model')

        # Load and preprocess the selected image
        img = image.load_img(self.image_path, target_size=(640, 640))
        img_array = image.img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0)
        img_array = img_array / 255.0

        # Make a prediction using the loaded model
        prediction = model.predict(img_array)[0]
        if prediction > 0.5:
            result = 'Cancerous'
        else:
            result = 'Non-cancerous'

        # Display the result and probability on the labels
        self.imageInformation.setText(
            'Result: {}, \nProbability: {}'.format(result, prediction[0]))
    
    #display fuction
    def display_image(self, image):
        """
        Displays the given image in the QGraphicsView.
        """
        pixmap = QPixmap.fromImage(image)
        self.scene.clear()
        self.scene.addPixmap(pixmap)
        self.view.fitInView(self.scene.sceneRect(), Qt.KeepAspectRatio)

    # BRIGHTNESS
    def adjust_brightness(self, value):
        if self.image_path:
            image = QImage(self.image_path)
            adjusted_image = image.copy()
            for y in range(adjusted_image.height()):
                for x in range(adjusted_image.width()):
                    pixel = adjusted_image.pixel(x, y)
                    rgb = QColor(pixel).getRgbF()
                    new_rgb = [min(max(rgb[i] + value / 100, 0), 1)
                               for i in range(3)]
                    new_pixel = QColor.fromRgbF(*new_rgb).rgba()
                    adjusted_image.setPixel(x, y, new_pixel)

            pixmap = QPixmap.fromImage(adjusted_image)
            self.scene.clear()
            self.scene.addPixmap(pixmap)
            self.view.fitInView(self.scene.sceneRect(), Qt.KeepAspectRatio)


    # SATURATION

    def adjust_saturation(self, value):
        """
        Adjusts the saturation of the image and updates the display.
        """
        image = self.original_image.copy()

        # Convert image to HSV color space
        hsv_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)

        # Adjust saturation value
        hsv_image[:, :, 1] = hsv_image[:, :, 1] + value

        # Convert image back to RGB color space
        image = cv2.cvtColor(hsv_image, cv2.COLOR_HSV2RGB)

        # Display the updated image in the label
        qimage = QtGui.QImage(
            image.data, image.shape[1], image.shape[0], QtGui.QImage.Format_RGB888)
        pixmap = QtGui.QPixmap.fromImage(qimage)
        self.image_label.setPixmap(pixmap)

    # EXPOSURE
    def adjust_exposure(self, value):
        if self.image_path:
            image = QImage(self.image_path)
            adjusted_image = image.copy()
            exposure_factor = 2 ** (value / 100)
            for y in range(adjusted_image.height()):
                for x in range(adjusted_image.width()):
                    pixel = adjusted_image.pixel(x, y)
                    rgb = QColor(pixel).getRgbF()
                    new_rgb = [min(max(rgb[i] * exposure_factor, 0), 1)
                               for i in range(3)]
                    new_pixel = QColor.fromRgbF(*new_rgb).rgba()
                    adjusted_image.setPixel(x, y, new_pixel)

            pixmap = QPixmap.fromImage(adjusted_image)
            self.scene.clear()
            self.scene.addPixmap(pixmap)
            self.view.fitInView(self.scene.sceneRect(), Qt.KeepAspectRatio)

    # WARMTH
    def adjust_warmth(self, value):
        """
        Adjusts the warmth of the image and updates the display.
        """
        image = self.original_image.copy()

        # Create an overlay to add warmth to the image
        h, w, ch = image.shape
        overlay = np.zeros((h, w, ch), dtype='uint8')
        if value > 0:
            overlay[:, :, 0] = value
        else:
            overlay[:, :, 2] = -value

        # Apply the overlay to the image
        image = cv2.addWeighted(image, 1, overlay, 1, 0)

        # Display the adjusted image in the label
        qimage = QtGui.QImage(
            image.data, image.shape[1], image.shape[0], QtGui.QImage.Format_RGB888)
        pixmap = QtGui.QPixmap.fromImage(qimage)
        self.image_label.setPixmap(pixmap)

    # TINT
    def adjust_tint(self, value):
        """
        Adjusts the tint of the image and updates the display.
        """
        image = self.original_image.copy()

        # Convert image to HSV color space
        hsv_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)

        # Adjust hue value
        hsv_image[:, :, 0] = hsv_image[:, :, 0] + value

        # Convert image back to RGB color space
        image = cv2.cvtColor(hsv_image, cv2.COLOR_HSV2RGB)

        # Display the adjusted image in the label
        qimage = QtGui.QImage(
            image.data, image.shape[1], image.shape[0], QtGui.QImage.Format_RGB888)
        pixmap = QtGui.QPixmap.fromImage(qimage)
        self.image_label.setPixmap(pixmap)

    def adjust_contrast(self, value):
        if self.image_path:
            image = QImage(self.image_path)
            adjusted_image = image.copy()
            contrast_factor = (259 * (value + 255)) / (255 * (259 - value))
            for y in range(adjusted_image.height()):
                for x in range(adjusted_image.width()):
                    pixel = adjusted_image.pixel(x, y)
                    rgb = QColor(pixel).getRgbF()
                    new_rgb = [
                        min(max((rgb[i] - 0.5) * contrast_factor + 0.5, 0), 1) for i in range(3)]
                    new_pixel = QColor.fromRgbF(*new_rgb).rgba()
                    adjusted_image.setPixel(x, y, new_pixel)

            pixmap = QPixmap.fromImage(adjusted_image)
            self.scene.clear()
            self.scene.addPixmap(pixmap)
            self.view.fitInView(self.scene.sceneRect(), Qt.KeepAspectRatio)

    def rotate_image(self):
        current_transform = self.view.transform()
        rotation = QTransform().rotate(90)
        new_transform = current_transform * rotation
        self.view.setTransform(new_transform)

    #Viewingbox 
    def adjust_to_blueish(self):
        if self.image_path:
            image = QImage(self.image_path)
            adjusted_image = image.copy()

        for y in range(adjusted_image.height()):
            for x in range(adjusted_image.width()):
                pixel = adjusted_image.pixel(x, y)
                rgb = QColor(pixel).getRgbF()
                new_rgb = [rgb[0], rgb[1], min(max(rgb[2] + 0.5, 0), 1)]
                new_pixel = QColor.fromRgbF(*new_rgb).rgba()
                adjusted_image.setPixel(x, y, new_pixel)

        self.display_image(adjusted_image)

    #Adjusting tint
    def adjust_tint(self, value):
        if self.image_path:
            image = QImage(self.image_path)
            adjusted_image = image.copy()
            tint_factor = value / 100.0

            # Adjust the tint based on the slider value
            for y in range(adjusted_image.height()):
                for x in range(adjusted_image.width()):
                    pixel = adjusted_image.pixel(x, y)
                    r, g, b, _ = QColor(pixel).getRgb()

                    if tint_factor < 0:
                        # Add purplish tint
                        r += abs(tint_factor) * (255 - r)
                        b += abs(tint_factor) * (255 - b)
                    else:
                        # Add greenish tint
                        g += tint_factor * (255 - g)

                    # Clamp the RGB values within the valid range
                    r = min(max(r, 0), 255)
                    g = min(max(g, 0), 255)
                    b = min(max(b, 0), 255)

                    # Create the new pixel color
                    new_pixel = QColor.fromRgb(r, g, b).rgba()
                    adjusted_image.setPixel(x, y, new_pixel)

            self.adjusted_image = adjusted_image
            self.display_image(self.adjusted_image)





    #COMPONENTS
    #DRAWING TOOL

    def toggle_draw(self):
        if self.pen_button.isChecked():
            self.view.setDragMode(QGraphicsView.NoDrag)
            self.scene.mousePressEvent = self.draw_start
            self.scene.mouseMoveEvent = self.draw_move
            self.scene.mouseReleaseEvent = self.draw_end
        else:
            self.view.setDragMode(QGraphicsView.ScrollHandDrag)
            self.scene.mousePressEvent = None
            self.scene.mouseMoveEvent = None
            self.scene.mouseReleaseEvent = None

    def draw_start(self, event):
        if event.button() == Qt.LeftButton:
            self.drawing = True
            self.last_point = event.scenePos()

    def draw_move(self, event):
        if self.drawing:
            self.scene.addLine(self.last_point.x(), self.last_point.y(), event.scenePos().x(), event.scenePos().y(), self.pen)
            self.last_point = event.scenePos()

    def draw_end(self, event):
        if event.button() == Qt.LeftButton:
            self.drawing = False

    def update_pen_size(self):
        pen_size = self.pen_size_slider.value()
        self.pen.setWidth(pen_size)

    def change_pen_color(self):
        color = QColorDialog.getColor(initial=self.pen.color())
        if color.isValid():
            self.pen.setColor(color)

    def contextMenuEvent(self, event):
        if self.pen_button.isChecked():
            item = self.view.itemAt(event.pos())
            if isinstance(item, QGraphicsLineItem):
                delete_action = QAction("Delete Line", self)
                delete_action.triggered.connect(
                    lambda: self.scene.removeItem(item))
                menu = self.createPopupMenu()
                menu.addAction(delete_action)
                menu.exec_(event.globalPos())





    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.image_label_2.setText(_translate("MainWindow", "Image Name"))
        self.undo_button.setText(_translate("MainWindow", "Undo"))
        self.redo_button.setText(_translate("MainWindow", "Redo"))
        self.detect_button.setText(_translate("MainWindow", "Detect"))
        self.generate_report.setText(_translate("MainWindow", "GR Report"))
        self.prev_button.setText(_translate("MainWindow", "<"))
        self.nex_button.setText(_translate("MainWindow", ">"))
        self.insert_new.setText(_translate("MainWindow", "New"))
        self.insert_new.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.open_folder.setShortcut(_translate("MainWindow", "Ctrl+F"))
        self.save_button.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.info.setText(_translate("MainWindow", "Info"))
        self.light.setText(_translate("MainWindow", "Light"))
        self.brightness_label.setText(_translate("MainWindow", "Brightness"))
        self.exposure_label.setText(_translate("MainWindow", "Exposure"))
        self.contrast_label.setText(_translate("MainWindow", "Contrast"))
        self.color_label.setText(_translate("MainWindow", "Color"))
        self.saturation_label.setText(_translate("MainWindow", "Saturation"))
        self.warmth_label.setText(_translate("MainWindow", "Warmth"))
        self.tint_label.setText(_translate("MainWindow", "Tint"))
        self.pencil_label.setText(_translate("MainWindow", "Pen"))
        self.pen_button.setText(_translate("MainWindow", "Pencil"))
        self.pen_color.setText(_translate("MainWindow", "Pen Color"))
        self.eraser_label.setText(_translate("MainWindow", "eraser"))
        self.eraser_button.setText(_translate("MainWindow", "Eraser"))
        self.thickness_label.setText(_translate("MainWindow", "Thickness"))
        self.opacity_label.setText(_translate("MainWindow", "Opacity"))
        self.zoom_label.setText(_translate("MainWindow", "Zoom"))
        self.text_label.setText(_translate("MainWindow", "Text"))
        self.font_combo.setCurrentText(_translate("MainWindow", "Arial"))
        self.font_combo.setItemText(0, _translate("MainWindow", "Arial"))
        self.font_combo.setItemText(1, _translate("MainWindow", "Segoe UI"))
        self.font_combo.setItemText(2, _translate("MainWindow", "Times New Roman"))
        self.bold_button.setText(_translate("MainWindow", "Bold"))
        self.italics_button.setText(_translate("MainWindow", "Italics"))
        self.text_input.setPlaceholderText(_translate("MainWindow", "enter text"))
        self.pushButton.setText(_translate("MainWindow", "Add"))
        self.viewbox_button.setText(_translate("MainWindow", "Vbox"))
        self.lock_button.setText(_translate("MainWindow", "Lock"))
        self.info_button.setText(_translate("MainWindow", "info"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionOpen_Image.setText(_translate("MainWindow", "Open Image"))
        self.actionOpen_Folder.setText(_translate("MainWindow", "Open Folder"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSave_As.setText(_translate("MainWindow", "Save As..."))
        self.actionShare.setText(_translate("MainWindow", "Share"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))
        self.actionBCDS_Help.setText(_translate("MainWindow", "BCDS Help"))
        self.actionAbout_BCDS.setText(_translate("MainWindow", "About BCDS"))


class TextEditorWindow(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Text Editor")
        self.setStyleSheet("background-color: rgb(31, 31, 31);")

        layout = QVBoxLayout(self)

        self.text_edit = QTextEdit(self)
        layout.addWidget(self.text_edit)

        button_widget = QWidget(self)
        button_layout = QHBoxLayout(button_widget)

        self.print_button = QPushButton("Print as PDF", button_widget)
        self.print_button.setStyleSheet("color: white;")
        self.print_button.setEnabled(False)
        self.print_button.clicked.connect(self.print_as_pdf)
        button_layout.addWidget(self.print_button)

        self.share_button = QPushButton("Share", button_widget)
        self.share_button.setStyleSheet("color: white;")
        self.share_button.setEnabled(False)
        self.share_button.clicked.connect(self.share_text)
        button_layout.addWidget(self.share_button)

        button_widget.setLayout(button_layout)
        layout.addWidget(button_widget)

        self.text_edit.textChanged.connect(self.update_button_state)
        self.text_edit.setStyleSheet("color: white; font-size: 12pt;")


    def update_button_state(self):
        text = self.text_edit.toPlainText()
        self.print_button.setEnabled(bool(text))
        self.share_button.setEnabled(bool(text))

    def print_as_pdf(self):
        printer = QPrinter(QPrinter.HighResolution)
        dialog = QPrintDialog(printer, self)

        if dialog.exec_() == QPrintDialog.Accepted:
            filename, _ = QFileDialog.getSaveFileName(
                self, "Save PDF", "", "PDF Files (*.pdf)")
            if filename:
                printer.setOutputFormat(QPrinter.PdfFormat)
                printer.setOutputFileName(filename)
                self.text_edit.document().print_(printer)

    def share_text(self):
        text = self.text_edit.toPlainText()
        # Code to share the text, e.g., send via email or post on social media
        QMessageBox.information(
            self, "Share", "<font color='white'>Under Construction!</font>")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
